#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"

export BASHDB_ROOT="${PROJECT_ROOT}"

source "${PROJECT_ROOT}/lib/common.sh"
source "${PROJECT_ROOT}/lib/storage.sh"
source "${PROJECT_ROOT}/lib/ddl.sh"
source "${PROJECT_ROOT}/lib/dml.sh"
source "${PROJECT_ROOT}/lib/select.sh"

print_help() {
  cat <<EOF
BashDB - SQL subset in Bash

Usage:
  bashdb [options]
  bashdb -f file.sql [--echo]
  bashdb --init

Options:
  -d DIR, --data DIR     Use data directory DIR
  -f FILE, --file FILE   Execute SQL file
  --echo                 Echo statements when executing a file
  --init                 Initialize data directory
  -h, --help             Show help

Interactive REPL: run without -f and type SQL terminated by semicolons.
EOF
}

DATA_DIR_OVERRIDE=""
SQL_FILE=""
ECHO_STATEMENTS="0"
DO_INIT="0"

while (( "$#" )); do
  case "${1}" in
    -d|--data)
      DATA_DIR_OVERRIDE="${2:-}"
      shift 2
      ;;
    -f|--file)
      SQL_FILE="${2:-}"
      shift 2
      ;;
    --echo)
      ECHO_STATEMENTS="1"
      shift 1
      ;;
    --init)
      DO_INIT="1"
      shift 1
      ;;
    -h|--help)
      print_help
      exit 0
      ;;
    *)
      echo "Unknown option: ${1}" >&2
      print_help
      exit 1
      ;;
  esac
done

if [[ -n "${DATA_DIR_OVERRIDE}" ]]; then
  export BASHDB_DIR="${DATA_DIR_OVERRIDE}"
fi

common::init_env

if [[ "${DO_INIT}" == "1" ]]; then
  mkdir -p "${DB_DIR}"
  echo "Initialized data directory at: ${DB_DIR}"
  exit 0
fi

execute_sql() {
  local sql="$1"
  sql="$(common::trim "${sql}")"
  if [[ -z "${sql}" ]]; then return 0; fi

  # Remove trailing semicolon if present
  sql="${sql%;}"
  local u="$(echo "${sql}" | tr '[:lower:]' '[:upper:]')"
  case "${u}" in
    CREATE\ TABLE\ *) ddl::create_table "${sql}" ;;
    DROP\ TABLE\ *)   ddl::drop_table "${sql}" ;;
    INSERT\ INTO\ *)  dml::insert_into "${sql}" ;;
    UPDATE\ *)         dml::update_table "${sql}" ;;
    DELETE\ FROM\ *)  dml::delete_from "${sql}" ;;
    SELECT\ *)         select::run_select "${sql}" ;;
    *) common::die "Unsupported or invalid SQL: ${sql}" ;;
  esac
}

run_repl() {
  echo "BashDB REPL. Data dir: ${DB_DIR}. End each statement with a semicolon. Ctrl-D to exit."
  local buf=""
  while true; do
    if [[ -z "${buf}" ]]; then
      printf "bashdb> "
    else
      printf "> "
    fi
    if ! IFS= read -r line; then
      echo
      break
    fi
    buf+=" ${line}"
    if [[ "${buf}" == *; ]]; then
      execute_sql "${buf}"
      buf=""
    fi
  done
}

run_file() {
  local file="$1"
  [[ -f "${file}" ]] || common::die "File not found: ${file}"
  local stmt=""
  while IFS= read -r line || [[ -n "$line" ]]; do
    # Skip comments that start with -- at line start
    if [[ "${line}" =~ ^[[:space:]]*-- ]]; then continue; fi
    stmt+=" ${line}"
    if [[ "${stmt}" == *; ]]; then
      if [[ "${ECHO_STATEMENTS}" == "1" ]]; then
        echo "-- ${stmt}"
      fi
      execute_sql "${stmt}"
      stmt=""
    fi
  done < "${file}"
  if [[ -n "${stmt}" ]]; then
    execute_sql "${stmt}"
  fi
}

if [[ -n "${SQL_FILE}" ]]; then
  run_file "${SQL_FILE}"
else
  run_repl
fi



